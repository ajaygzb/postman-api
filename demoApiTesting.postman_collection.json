{
	"variables": [],
	"info": {
		"name": "demoApiTesting",
		"_postman_id": "a831403a-51fa-da58-1b18-38fef13916ab",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Add a User",
			"description": "This folder contains a collection of requests which perform POST actions",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var header = postman.getResponseHeader('Content-Type');",
									"",
									"//tests['verify response code'] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 200 || responseCode.code === 201) {",
									"    ",
									"    tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"    tests['verify response keys'] = 'secondname' in jsonData;",
									"    tests['Header contains value'] = header = 'application/json';",
									"    ",
									"    tests['Verify if response is correct'] = jsonData.firstname == 'Gokul' &&",
									"                                            jsonData.secondname == 'Sridharan' &&",
									"                                            jsonData.city       == 'London' &&",
									"                                            jsonData.search.Housetype == 'independent' &&",
									"                                            jsonData.search.location == 'London' &&",
									"                                            jsonData.search.minvalue === 29033 &&",
									"                                            jsonData.search.maxvalue === 90017",
									"}",
									"",
									"    ",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"firstname\": \"Gokul\",\n        \"secondname\": \"Sridharan\",\n        \"city\": \"London\",\n        \"search\": {\n          \"Housetype\": \"independent\",\n          \"location\": \"London\",\n          \"minvalue\": 29033,\n          \"maxvalue\": 90017\n        }\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Get User Details",
			"description": "This folder contains collection of get requests for facebook's graph api ",
			"item": [
				{
					"name": "Fetch list of people",
					"request": {
						"url": "{{url}}",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Fetch first 5 users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"names = ['Destinee', 'Martin', 'Claude', 'Brown', 'Vicenta'];",
									"",
									"//tests[\"count: \" + jsonData.length] = true;",
									"",
									"if(jsonData.length == 5 && responseCode.code === 200) {",
									"    ",
									"    jsonData.forEach(function (res) {",
									"        tests[\"Expected firstname are: \"+ res.id ] = true;",
									"        tests[\"firstname should match \" + res.firstname] = res.firstname === names[res.id];",
									"    });",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}?_limit=5",
							"host": [
								"{{url}}"
							],
							"query": [
								{
									"key": "_limit",
									"value": "5",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Fetch list in descending order",
					"request": {
						"url": {
							"raw": "{{url}}?_sort=id&_order=DESC",
							"host": [
								"{{url}}"
							],
							"query": [
								{
									"key": "_sort",
									"value": "id",
									"equals": true,
									"description": ""
								},
								{
									"key": "_order",
									"value": "DESC",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Fetch users between id 10 and 20",
					"request": {
						"url": {
							"raw": "{{url}}?id_gte=10&id_lte=20",
							"host": [
								"{{url}}"
							],
							"query": [
								{
									"key": "id_gte",
									"value": "10",
									"equals": true,
									"description": ""
								},
								{
									"key": "id_lte",
									"value": "20",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Search for a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var search = postman.getEnvironmentVariable(\"searchKey\");",
									"",
									"if(responseCode.code === 200 || responseCode.code === 201) {",
									"    ",
									"    tests['Headers contain Content-type'] = responseHeaders.hasOwnProperty('Content-Type');",
									"    tests['Verify powered by header value'] = (postman.getResponseHeader('X-Powered-By') == 'Express');",
									"    tests[\"Body contains the search string\"] = responseBody.has(search);",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}?q={{searchKey}}",
							"host": [
								"{{url}}"
							],
							"query": [
								{
									"key": "q",
									"value": "{{searchKey}}",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Patch User Details",
			"description": "",
			"item": [
				{
					"name": "Update user details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var uniqId = postman.getEnvironmentVariable(\"uniqueid\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if(jsonData.id == uniqId && responseCode.code === 200) {",
									"    tests['Verify if location key is updated'] = jsonData.city === 'Uk';",
									"}",
									"",
									"var schema = {",
									"",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"    \"definitions\": {},",
									"    \"id\": \"http://example.com/example.json\",",
									"    \"properties\": {",
									"        \"city\": {",
									"            \"id\": \"/properties/city\",",
									"            \"type\": \"string\"",
									"        },",
									"        \"firstname\": {",
									"            \"id\": \"/properties/firstname\",",
									"            \"type\": \"string\"",
									"        },",
									"        \"id\": {",
									"            \"id\": \"/properties/id\",",
									"            \"type\": \"integer\"",
									"        },",
									"        \"search\": {",
									"            \"id\": \"/properties/search\",",
									"            \"properties\": {",
									"                \"Housetype\": {",
									"                    \"id\": \"/properties/search/properties/Housetype\",",
									"                    \"type\": \"string\"",
									"                },",
									"                \"location\": {",
									"                    \"id\": \"/properties/search/properties/location\",",
									"                    \"type\": \"string\"",
									"                },",
									"                \"maxvalue\": {",
									"                    \"id\": \"/properties/search/properties/maxvalue\",",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"minvalue\": {",
									"                    \"id\": \"/properties/search/properties/minvalue\",",
									"                    \"type\": \"integer\"",
									"                }",
									"            },",
									"            \"type\": \"object\"",
									"        },",
									"        \"secondname\": {",
									"            \"id\": \"/properties/secondname\",",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"type\": \"object\"",
									"};",
									"",
									"tests[\"Verify if response handles Valid Schema\"] = tv4.validate(jsonData, schema);",
									"console.log(\"Validation failed: \", tv4.error);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/{{uniqueid}}",
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{uniqueid}},\n    \"city\": \"Uk\"\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "ZDelete User Details",
			"description": "This folder contains collection of requests which performs delete action ",
			"item": [
				{
					"name": "Delete a user",
					"request": {
						"url": "{{url}}/{{uniqueid}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}